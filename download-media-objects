#!/usr/bin/env python3

import argparse
import json
import logging
import os
import sys
import time
from typing import IO, Any, Iterator

logger = logging.getLogger(__name__)

import requests

Tweet = dict[str, Any]
MediaObject = dict[str, Any]


def read_tweets(f: IO) -> Iterator[Tweet]:
    for line in f:
        item = json.loads(line)
        yield from item['data']


def api_get_media_object(tweet_id: str, bearer_token: str) -> str:
    r = requests.get(
        f'https://api.twitter.com/2/tweets?ids={tweet_id}'
        '&expansions=attachments.media_keys'
        '&media.fields=media_key,preview_image_url,type,url,width,alt_text',
        headers={'Authorization': f'Bearer {bearer_token}'},
    )
    r.raise_for_status()
    return r.text


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'timeline_file', type=argparse.FileType('r'), default=sys.stdin
    )
    parser.add_argument(
        'media_objects_file', type=argparse.FileType('w'), default=sys.stdout
    )
    parser.add_argument(
        '-v', '--verbose', action='store_true', help='Enable debugging output'
    )
    args = parser.parse_args()
    if args.verbose:
        logging.basicConfig(
            stream=sys.stderr, level=logging.INFO, format='%(message)s'
        )

    bearer_token = os.environ.get('BEARER_TOKEN')
    if not bearer_token:
        raise Exception('Missing environment variable BEARER_TOKEN')

    for tweet in read_tweets(args.timeline_file):
        tweet_id = tweet['id']
        logger.info(f'Downloading media object {tweet_id}...')
        media_object_str = api_get_media_object(tweet_id, bearer_token)
        args.media_objects_file.write(media_object_str + '\n')
        time.sleep(3)

    logger.info('Done')


if __name__ == '__main__':
    main()
